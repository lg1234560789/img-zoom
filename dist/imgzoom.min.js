/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
//获取元素的绝对横坐标
const getElementLeft = (element) => {
    let actualLeft = element.offsetLeft;
    let current = element.offsetParent;

    while (current !== null){
　　　　actualLeft += current.offsetLeft;
　　　　current = current.offsetParent;
　　}

　　return actualLeft;
}
/* harmony export (immutable) */ __webpack_exports__["a"] = getElementLeft;


//获取元素的绝对纵坐标
const getElementTop = (element) => {
　let actualTop = element.offsetTop;
　let current = element.offsetParent;

　　　while (current !== null){
　　　　　actualTop += current.offsetTop;
　　　　　current = current.offsetParent;
　　　}

　　　return actualTop;
　}
/* harmony export (immutable) */ __webpack_exports__["b"] = getElementTop;


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__util__ = __webpack_require__(0);


const imgLinks = document.querySelectorAll('.imgList li a');
const zoomWrapper = document.querySelector('.zoomWrapper')
const img = zoomWrapper.querySelector('img');
const zoomWindow = document.querySelector('.zoomWindow');
const zWindowImg = zoomWindow.querySelector('img');

imgLinks.forEach((imgLink) => {
    imgLink.addEventListener('click', () => {
        let midSrc = imgLink.dataset.midsrc;
        img.setAttribute('src', midSrc);

        let bigSrc = imgLink.dataset.bigsrc;

        zWindowImg.setAttribute('src', bigSrc);
    })
})

// //移动
// const zoomMask = document.querySelector('.zoomMask');


// zoomWrapper.addEventListener('mouseover', () => {
//     zoomMask.classList.add('show');
//     zoomWindow.classList.add('windowShow');
// })

// zoomWrapper.addEventListener('mouseout', () => {
//     zoomMask.classList.remove('show');
//     zoomWindow.classList.remove('windowShow');
// })

// document.addEventListener('mousemove', (e) => {

    

//     zoomMask.style.top = (e.clientY - zoomMask.offsetHeight / 2) + 'px';
//     zoomMask.style.left = (e.clientX - zoomMask.offsetWidth / 2)  + 'px';



//     if (parseInt(zoomMask.style.left) <= getElementLeft(zoomWrapper)) {
//         zoomMask.style.left = getElementLeft(zoomWrapper) + 'px';
//     }
//     if (parseInt(zoomMask.style.top) <= getElementTop(zoomWrapper)) {
//         zoomMask.style.top = getElementTop(zoomWrapper) + 'px';
//     }
//     if (parseInt(zoomMask.style.top) >= (getElementTop(zoomWrapper) + zoomWrapper.offsetHeight - zoomMask.offsetHeight)) {
//         zoomMask.style.top = (getElementTop(zoomWrapper) + zoomWrapper.offsetHeight - zoomMask.offsetHeight) + 'px';
//     }

//     if (parseInt(zoomMask.style.left) >= (getElementLeft(zoomWrapper) + zoomWrapper.offsetWidth - zoomMask.offsetWidth)) {
//         zoomMask.style.left = (getElementLeft(zoomWrapper) + zoomWrapper.offsetWidth - zoomMask.offsetWidth) + 'px';
//     }

//     let bigImgPosLeft = parseInt(zoomMask.style.left) * 2;
//     let bigImgPosTop = parseInt(zoomMask.style.top) * 2; 

//     let x = getElementLeft(zoomMask) - getElementLeft(zoomWrapper) - 7;
//     let y = getElementTop(zoomMask) - getElementTop(zoomWrapper) - 7;
//     console.log(x, y);

//     zWindowImg.style.top = `-${y * 2.9}px`;
//     zWindowImg.style.left = `-${x * 2.9}px`;

// })


class ImgZoom {
    constructor (el, options ) {
        
        let DEFAULT = {
            created: false,
            zoomMask: null
        }

        this.el = document.querySelector(el);
        this.opts = Object.assign({}, DEFAULT, options);
        this.offset = {
            left: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["a" /* getElementLeft */])(this.el),
            top: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__util__["b" /* getElementTop */])(this.el)
        }

        this.addEvent();
    }


    addEvent () {
        this.el.addEventListener('mousemove', this.createMask.bind(this));
        this.el.addEventListener('mouseleave', this.leaveHandler.bind(this));
    }
    

    createMask () {

        if (!this.opts.created) {
            let span = document.createElement('span');
            span.className = 'zoomMask';
            this.el.appendChild(span);


            this.opts.created = true;
            this.opts.zoomMask = span;
            
        }

        this.opts.zoomMask.classList.add('show');
        
        document.addEventListener('mousemove', this.moveHandler.bind(this))
    }



    leaveHandler () {
        this.opts.zoomMask.classList.remove('show');
    }

    moveHandler (e) {
        let zoomMask = document.querySelector('.zoomMask');
        zoomMask.style.top = (e.clientY - zoomMask.offsetHeight / 2) + 'px';
        zoomMask.style.left = (e.clientX - zoomMask.offsetWidth / 2)  + 'px';
        let boundY = this.offset.top + this.el.offsetHeight - zoomMask.offsetHeight;
        let boundX = this.offset.left + this.el.offsetWidth - zoomMask.offsetWidth;

        if (parseInt(zoomMask.style.left) <= this.offset.left) {
            zoomMask.style.left = this.offset.left + 'px';
        }
        if (parseInt(zoomMask.style.top) <= this.offset.top) {
            zoomMask.style.top = this.offset.top + 'px';
        }
        if (parseInt(zoomMask.style.top) >= boundY) {
            zoomMask.style.top = boundY + 'px';
        }

        if (parseInt(zoomMask.style.left) >= boundX) {
            zoomMask.style.left = boundX + 'px';
        }
    }
    
}

new ImgZoom('.zoomWrapper');




/***/ })
/******/ ]);